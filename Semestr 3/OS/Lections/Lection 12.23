Стивенсон - Разработка сетевых приложений

Протоколы:
	TCP/IP:
	1) Уровень сетевого интерфейса
	2) Сетевой уровень
	3) Транспортный уровень
	4) Уровень приложений

Сетевые карты имеют свой уникальный MAC(Media Adres Control) адрес

Два вида протоколов передачи:
TCP(надежнее) | UDP (быстрее)

Модель:
Клиент-сервер
	Сервер работает и ждет запросов от клиентов
	Общение происходит от клиента
	Клиент имеет адрес сервера
	Сервер узнает адрес, как правило, при запросе
	Используют один протокол

Схема взаимодействия для протокола UDP:
//Socket - пара адресов, определяет соединение. Объект для работы с этими адресами
Сервер
	1) Создание сокета - socket()
	2) Соотношение сокета с адресами - bind()
	Цикл{
	3) Ожидание получения адреса и сетевого интерфейса - reckfrom()
	4) Содержательная часть и ответ - sendto()
	}
Клиет
	1) Создание сокета - socket()
	2) Соотношение сокета с адресами - bind()
	3) Отправка сообщения - sendto()
	4) Ожидание ответа - reckfrom()

Схема взаимодействия для протокола TCP:
Сервер
	1) Создание сокета - socket()
	2) Привязка сокета - bind()
	3) Перевод сокета в прослушивание - listen()
	Цикл{
	4) Открытие соединения - accept()
	5) Читаем информацию - read()
	6) Ответ - write()
	7) Завершение - close()
	}

Клиент
	1) Создание сокета - socket()
	2) Привязка к адресу, отправка заявки на соединение, соединение  - connect()
	3) Передача информации - write()
	4) Ожидание извне - read()
	5) Завершение - close()

Пример TCP:
int sockid; // дескриптор сайта
struct sockaddz_in servaddz; // дискриптор сайта

// Создаем сокет
sockid = socket(PF_INET, SOCK_STREAM, 0);
nemset(&servaddz, 0 , sizeof(servaddz));
servaddz.sin_family = AF_IWET;
servaddz.sin_port = connect(sockid, &servaddz, sizeof(servaddz));

for(int i = 0; i < s; i++){
	fgets(sendline, 1000, stdin);
    n = write(sockId, sendline);
    n = read(sockid, reckLine, 999);
    print("%s", reckline);
}
close(sockid);